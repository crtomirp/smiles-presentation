// ---------- SCORM init ----------
window.addEventListener('load', () => {
  try {
    scorm.init();
    if (scorm.get("cmi.core.lesson_status") === "not attempted") {
      scorm.set("cmi.core.lesson_status", "incomplete");
      scorm.save();
    }
  } catch (e) { console.warn('SCORM init warning:', e); }
});
window.addEventListener('beforeunload', () => { try { scorm.quit(); } catch(e){} });

// ---------- App State & Constants ----------
const TOTAL_SLIDES = 20;
const AUTO_ADVANCE_DELAY_MS = 3500;
let currentSlide = 0;
let autoMode = false;
let autoTimer = null;
let utterance = null; // For TTS fallback

// ---------- DOM refs ----------
const slideContentArea = document.getElementById('slide-content-area');
const prevBtn = document.getElementById('prevBtn');
const nextBtn = document.getElementById('nextBtn');
const slideCounter = document.getElementById('slide-counter');
const progressBar = document.getElementById('progress-bar');
const themeToggle = document.getElementById('theme-toggle');
const narrationToggle = document.getElementById('narration-toggle');
const presentationContainer = document.getElementById('presentation-container');
const audioToggle = document.getElementById('audio-toggle');
const audioEl = document.getElementById('narration-audio');
const autoToggle = document.getElementById('auto-toggle');

// ---------- Core Logic ----------
async function showSlide(index) {
  stopAllAudio();
  autoTimer && clearTimeout(autoTimer);

  // Fetch and display new slide content
  try {
    const response = await fetch(`slides/slide${index + 1}.html`, {cache: "no-cache"});
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    slideContentArea.innerHTML = await response.text();
    const slideDiv = slideContentArea.firstElementChild;
    if (slideDiv) {
        // Add classes to trigger styles and animations
        slideDiv.classList.add('slide', 'active');
        const animatedElements = slideDiv.querySelectorAll('.animated-element');
        animatedElements.forEach(el => {
            el.style.animation = 'none';
            void el.offsetWidth; // Trigger reflow
            el.style.animation = '';
        });
    }
  } catch (error) {
    slideContentArea.innerHTML = `<div class="text-center text-red-500"><p><strong>Error Loading Slide</strong></p><p>${error.message}</p></div>`;
    console.error("Failed to fetch slide:", error);
    return;
  }
  
  // ----- AND ADDED THIS LOGIC HERE -----
  
    // After loading, check for interactive slides
  setTimeout(() => {
    // Logic for Slide 10 (Practice Examples)
    if (index === 9) { 
      setupToggleButton('aspirin-toggle-btn', 'aspirin-smiles');
      setupToggleButton('caffeine-toggle-btn', 'caffeine-smiles');
    }
    // ADDED: Logic for Slide 18 (Flip Card Activity)
    if (index === 17) {
      setupFlipCard('card1');
      setupFlipCard('card2');
    }
	
	if (index === 18 || index === 19) {
  setupQuizSlide(index);
    }

  }, 100);
  
  currentSlide = index;
  updateUI();
  
  if (currentSlide === TOTAL_SLIDES - 1) {
    try {
      if (scorm.get("cmi.core.lesson_status") !== "completed") {
        scorm.set("cmi.core.lesson_status", "completed");
        scorm.save();
      }
    } catch(e) { console.warn('SCORM completion set failed', e); }
  }
  
  preloadAudioForSlide(currentSlide + 1);

  if (autoMode) {
    runAutoFromCurrent();
  }
}

function updateUI() {
  slideCounter.textContent = `Slide ${currentSlide + 1} / ${TOTAL_SLIDES}`;
  prevBtn.disabled = currentSlide === 0;
  nextBtn.disabled = currentSlide === TOTAL_SLIDES - 1;
  progressBar.style.width = `${((currentSlide + 1) / TOTAL_SLIDES) * 100}%`;

  const themeIconLight = document.getElementById('theme-icon-light');
  const themeIconDark = document.getElementById('theme-icon-dark');
  if (document.documentElement.classList.contains('dark')) {
      themeIconLight.classList.add('hidden');
      themeIconDark.classList.remove('hidden');
  } else {
      themeIconLight.classList.remove('hidden');
      themeIconDark.classList.add('hidden');
  }
}

// ---------- Audio & Auto-play ----------
function stopAllAudio() {
  if (window.speechSynthesis && speechSynthesis.speaking) speechSynthesis.cancel();
  if (!audioEl.paused) {
    audioEl.pause();
    audioEl.currentTime = 0;
  }
  setAudioIcon(false);
}

function setAudioIcon(speaking) {
  const audioPlayIcon = document.getElementById('audio-play-icon');
  const audioStopIcon = document.getElementById('audio-stop-icon');
  if (speaking) {
    audioPlayIcon.classList.add('hidden');
    audioStopIcon.classList.remove('hidden');
    audioToggle.title = 'Stop Narration';
  } else {
    audioPlayIcon.classList.remove('hidden');
    audioStopIcon.classList.add('hidden');
    audioToggle.title = 'Play Narration';
  }
}

function playNarrationOnce() {
  return new Promise(async (resolve) => {
    const slideDiv = slideContentArea.firstElementChild;
    if (!slideDiv) return resolve();

    // 1. Try to play MP3
    const audioUrl = slideDiv.dataset.audio;
    if (audioUrl) {
      try {
        if (!audioEl.src.endsWith(audioUrl)) audioEl.src = audioUrl;
        await audioEl.play();
        setAudioIcon(true);
        audioEl.onended = () => { setAudioIcon(false); resolve(); };
        audioEl.onerror = () => { console.warn('MP3 error, trying TTS'); playTTSFallback(resolve); };
        return;
      } catch (err) {
        console.warn('MP3 play failed, falling back to TTS.', err);
      }
    }
    // 2. Fallback to TTS
    playTTSFallback(resolve);
  });
}

function playTTSFallback(onFinishCallback) {
  const narrationElement = slideContentArea.querySelector('.narration-panel p');
  if (!narrationElement || !('speechSynthesis' in window)) {
    if (onFinishCallback) onFinishCallback();
    return;
  }
  const clone = narrationElement.cloneNode(true);
  const strong = clone.querySelector('strong'); 
  if (strong) strong.remove();
  const txt = (clone.textContent || '').trim();

  if (txt) {
    if (speechSynthesis.speaking) speechSynthesis.cancel();
    utterance = new SpeechSynthesisUtterance(txt);
    utterance.lang = 'en-GB';
    utterance.onstart = () => setAudioIcon(true);
    utterance.onend = () => { setAudioIcon(false); if (onFinishCallback) onFinishCallback(); };
    utterance.onerror = () => { setAudioIcon(false); if (onFinishCallback) onFinishCallback(); };
    speechSynthesis.speak(utterance);
  } else if (onFinishCallback) {
    onFinishCallback();
  }
}

function runAutoFromCurrent() {
  if (!autoMode) return;
  playNarrationOnce().then(() => {
    if (!autoMode) return;
    autoTimer = setTimeout(() => {
      if (!autoMode) return;
      if (currentSlide < TOTAL_SLIDES - 1) {
        showSlide(currentSlide + 1); // This will call runAutoFromCurrent again
      } else {
        autoMode = false; // Finished last slide
        updateAutoButton();
      }
    }, AUTO_ADVANCE_DELAY_MS);
  });
}

function updateAutoButton() {
  if (autoMode) {
    autoToggle.classList.add('bg-indigo-600', 'text-white');
    autoToggle.classList.remove('hover:bg-gray-300', 'dark:hover:bg-gray-700', 'text-gray-800', 'dark:text-gray-200');
    autoToggle.textContent = 'Auto: ON';
  } else {
    autoToggle.classList.remove('bg-indigo-600', 'text-white');
    autoToggle.classList.add('hover:bg-gray-300', 'dark:hover:bg-gray-700', 'text-gray-800', 'dark:text-gray-200');
    autoToggle.textContent = 'Auto';
  }
}

function preloadAudioForSlide(slideIndex) {
  if (slideIndex >= TOTAL_SLIDES) return;
  const url = `audio/slide${slideIndex + 1}.mp3`;
  // Check if preload link already exists
  if (document.querySelector(`link[href="${url}"]`)) return;
  const link = document.createElement('link');
  link.rel = 'preload';
  link.as = 'audio';
  link.href = url;
  document.head.appendChild(link);
}

// ----- ADDED THIS SECTION -----
// Helper function for the interactive slide's buttons
function setupToggleButton(buttonId, codeId) {
  const toggleButton = document.getElementById(buttonId);
  if (!toggleButton) return;

  const codeElement = document.getElementById(codeId);
  if (!codeElement) return;

  const handleToggle = () => {
    codeElement.classList.toggle('hidden');
    const isHidden = codeElement.classList.contains('hidden');
    toggleButton.textContent = isHidden ? 'Show SMILES' : 'Hide SMILES';
  };

  // Avoid adding the same listener multiple times
  if (!toggleButton.dataset.listenerAttached) {
    toggleButton.addEventListener('click', handleToggle);
    toggleButton.dataset.listenerAttached = 'true';
  }
}
// -----------------------------

// ---------- Event Listeners ----------
nextBtn.addEventListener('click', () => { if (currentSlide < TOTAL_SLIDES - 1) showSlide(currentSlide + 1); });
prevBtn.addEventListener('click', () => { if (currentSlide > 0) showSlide(currentSlide - 1); });
narrationToggle.addEventListener('click', () => presentationContainer.classList.toggle('narration-visible'));
autoToggle.addEventListener('click', () => {
  autoMode = !autoMode;
  updateAutoButton();
  if (autoMode && !audioEl.paused) return; // Already playing, let it finish
  if (autoMode) runAutoFromCurrent();
  else autoTimer && clearTimeout(autoTimer);
});
audioToggle.addEventListener('click', () => {
    const isPlaying = !audioEl.paused || (window.speechSynthesis && speechSynthesis.speaking);
    if (isPlaying) stopAllAudio();
    else playNarrationOnce();
});

// Theme Toggle
function setTheme(isDark) {
  if (isDark) {
    document.documentElement.classList.add('dark');
    localStorage.setItem('theme', 'dark');
  } else {
    document.documentElement.classList.remove('dark');
    localStorage.setItem('theme', 'light');
  }
  updateUI();
}
themeToggle.addEventListener('click', () => setTheme(!document.documentElement.classList.contains('dark')));
const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
setTheme(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDark);

// Keyboard Navigation
document.addEventListener('keydown', (e) => {
  if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
  if (e.key === 'ArrowRight' || e.key === ' ') { e.preventDefault(); nextBtn.click(); }
  else if (e.key === 'ArrowLeft') { e.preventDefault(); prevBtn.click(); }
  else if (e.key.toLowerCase() === 'a') { e.preventDefault(); autoToggle.click(); }
  else if (e.key.toLowerCase() === 'm') { e.preventDefault(); audioToggle.click(); }
});

// ----- ADDED THIS SECTION FOR FLIP CARDS -----
// Helper function for the flip card activity slide
function setupFlipCard(cardId) {
  const card = document.getElementById(cardId);
  if (!card) return;

  const handleFlip = () => {
    card.classList.toggle('is-flipped');
  };

  // Avoid adding the same listener multiple times
  if (!card.dataset.listenerAttached) {
    card.addEventListener('click', handleFlip);
    card.dataset.listenerAttached = 'true';
  }
}

// ---------- Initial Load ----------
showSlide(0);
preloadAudioForSlide(1);
